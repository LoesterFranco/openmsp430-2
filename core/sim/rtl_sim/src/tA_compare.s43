/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                                  TIMER A                                  */
/*---------------------------------------------------------------------------*/
/* Test the timer A:                                                         */
/*                        - Check the timer compare features.                */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev$                                                                */
/* $LastChangedBy$                                          */
/* $LastChangedDate$          */
/*===========================================================================*/

.global main

.set   DMEM_BASE, (__data_start     )
.set   DMEM_200,  (__data_start+0x00)
.set   DMEM_202,  (__data_start+0x02)
.set   DMEM_204,  (__data_start+0x04)
.set   DMEM_206,  (__data_start+0x06)
.set   DMEM_208,  (__data_start+0x08)
.set   DMEM_212,  (__data_start+0x12)
.set   DMEM_214,  (__data_start+0x14)
.set   DMEM_216,  (__data_start+0x16)
.set   DMEM_218,  (__data_start+0x18)
.set   DMEM_222,  (__data_start+0x22)
.set   DMEM_224,  (__data_start+0x24)
.set   DMEM_226,  (__data_start+0x26)
.set   DMEM_228,  (__data_start+0x28)
.set   DMEM_250,  (__data_start+0x50)

.set   TACTL,   0x0160
.set   TAR,     0x0170
.set   TACCTL0, 0x0162
.set   TACCR0,  0x0172
.set   TACCTL1, 0x0164
.set   TACCR1,  0x0174
.set   TACCTL2, 0x0166
.set   TACCR2,  0x0176
.set   TAIV,    0x012E


WAIT_FUNC:
	dec r14
	jnz WAIT_FUNC
	ret
	
main:
 	mov  #DMEM_250, r1 	; # Initialize stack pointer
	mov  #0x0000, &DMEM_200

	
       /* --------------   TIMER A TEST:  UP MODE   ----------------- */

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0000, &TACCTL1
	mov  #0x0000, &TACCTL2
	eint

	                        ; # --------- COMPARATOR 0 ----------
	mov  #0x0204, &TACTL
	mov  #0x0015, &TACCR0   ; # Period = (0x15+1)*2
	mov  #0x0090, &TACCTL0  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0000, &TACCR1   ; #
	mov  #0x0000, &TACCTL1  ; # Disabled
	mov  #0x0000, &TACCR2   ; #
	mov  #0x0000, &TACCTL2  ; # Disabled
	mov  #0x0256, &TACTL    ; # Up-mode & clk/2, IRQ enabled
	mov  #0x0001, &DMEM_200
	mov  #0x0010, r14
        call #WAIT_FUNC

	                        ; # --------- COMPARATOR 1 ----------
	mov  #0x0204, &TACTL
	mov  #0x0015, &TACCR0   ; # Period = (0x15+1)*2
	mov  #0x0000, &TACCTL0  ; #
	mov  #0x0090, &TACCTL0  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0005, &TACCR1   ; #
	mov  #0x0090, &TACCTL1  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0000, &TACCR2   ; #
	mov  #0x0000, &TACCTL2  ; # Disabled
	mov  #0x0254, &TACTL    ; # Up-mode & clk/2
	mov  #0x0002, &DMEM_200
	mov  #0x0008, r14
        call #WAIT_FUNC

	                        ; # --------- COMPARATOR 2 ----------
	mov  #0x0204, &TACTL
	mov  #0x0015, &TACCR0   ; # Period = (0x15+1)*2
	mov  #0x0000, &TACCTL0  ; #
	mov  #0x0090, &TACCTL0  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0000, &TACCR1   ; #
	mov  #0x0000, &TACCTL1  ; # Disabled
	mov  #0x000C, &TACCR2   ; #
	mov  #0x0090, &TACCTL2  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0254, &TACTL    ; # Up-mode & clk/2
	mov  #0x0003, &DMEM_200
	mov  #0x0008, r14
        call #WAIT_FUNC


	dint		
	mov  #0x0000, &DMEM_200
	mov  #0x1000, r15

	
       /* --------------   TIMER A TEST:  CONTINUOUS MODES   ----------------- */

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0000, &TACCTL1
	mov  #0x0000, &TACCTL2
	eint

	                        ; # --------- COMPARATOR 0, 1 and 2 - TEST 1 ----------
	mov  #0x0204, &TACTL
	mov  #0x0030, &TACCR0
	mov  #0x0090, &TACCTL0  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0060, &TACCR1
	mov  #0x0090, &TACCTL1  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0090, &TACCR2
	mov  #0x0090, &TACCTL2  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0266, &TACTL    ; # Continuous-mode & clk/2, IRQ enabled
	mov  #0xfff0, &TAR
	mov  #0x0001, &DMEM_200
	mov  #0x0080, r14
        call #WAIT_FUNC

	                        ; # --------- COMPARATOR 0, 1 and 2 - TEST 2 ----------
	mov  #0x0204, &TACTL
	mov  #0x0030, &TACCR0
	mov  #0x0090, &TACCTL0  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0060, &TACCR1
	mov  #0x0090, &TACCTL1  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0090, &TACCR2
	mov  #0x0090, &TACCTL2  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0266, &TACTL    ; # Continuous-mode & clk/2, IRQ enabled
	mov  #0xfff0, &TAR
	mov  #0x0002, &DMEM_200
	mov  #0x0080, r14
        call #WAIT_FUNC


	dint		
	mov  #0x0000, &DMEM_200
	mov  #0x2000, r15
	
	
       /* --------------   TIMER A TEST:  UP-DOWN MODE   ----------------- */
		
	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0000, &TACCTL1
	mov  #0x0000, &TACCTL2
	eint

	                        ; # --------- COMPARATOR 0, 1 and 2  ----------
	mov  #0x0204, &TACTL
	mov  #0x0090, &TACCR0
	mov  #0x0090, &TACCTL0  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0060, &TACCR1
	mov  #0x0090, &TACCTL1  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0030, &TACCR2
	mov  #0x0090, &TACCTL2  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0001, &DMEM_200
	mov  #0x0277, &TACTL    ; # Up-down mode & clk/2, IRQ enabled
	mov  #0x00E0, r14
        call #WAIT_FUNC

	mov  #0x0000, &TACCTL0
	mov  #0x0000, &TACCTL1
	mov  #0x0000, &TACCTL2
	mov  #0x0204, &TACTL

	                        ; # --------- COMPARATOR 0, 1 and 2  ----------
	mov  #0x0204, &TACTL
	mov  #0x0090, &TACCR0
	mov  #0x0090, &TACCTL0  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0060, &TACCR1
	mov  #0x0090, &TACCTL1  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0030, &TACCR2
	mov  #0x0090, &TACCTL2  ; # Compare mode, output toggle mode, IRQ enabled
	mov  #0x0002, &DMEM_200
	mov  #0x0277, &TACTL    ; # Up-down mode & clk/2, IRQ enabled
	mov  #0x00E0, r14
        call #WAIT_FUNC


	dint		
	mov  #0x0000, &DMEM_200
	mov  #0x3000, r15
	
        /* --------------   TIMER A TEST:  CCI INPUT LATCHING (SCCI)  ----------------- */

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0000, &TACCTL1
	mov  #0x0000, &TACCTL2
	eint

	                        ; # --------- UP-MODE - COMPARATOR 0 ----------
	mov  #0x0204, &TACTL
	mov  #0x0020, &TACCR0
	mov  #0x3080, &TACCTL0  ; # Compare mode, output toggle mode, select VCC input
	mov  #0x0000, &TACCR1
	mov  #0x0000, &TACCTL1  ; # Disabled
	mov  #0x0000, &TACCR2
	mov  #0x0000, &TACCTL2  ; # Disabled
	mov  #0x0001, &DMEM_200
	mov  #0x0254, &TACTL    ; # Up-mode & clk/2

comp0_check_0:                  ; # Wait until SCCI is set to 1
	mov       r5, &DMEM_202
	mov &TACCTL0, r5
	mov       r5, r4
	and  #0x0001, r4
	jz  comp0_check_0
	mov &TACCTL0, &DMEM_204

	mov  #0x2080, &TACCTL0  ; # Wait until SCCI is set back to 0
comp0_check_1:
	mov       r5, &DMEM_206
	mov &TACCTL0, r5
	mov       r5, r4
	and  #0x0001, r4
	jz  comp0_check_1
	mov &TACCTL0, &DMEM_208

	
	                        ; # --------- UP-MODE - COMPARATOR 1 ----------
	mov  #0x0204, &TACTL
	mov  #0x0040, &TACCR0
	mov  #0x0000, &TACCTL0  ; # Disabled
	mov  #0x0020, &TACCR1
	mov  #0x3080, &TACCTL1  ; # Compare mode, output toggle mode, select VCC input
	mov  #0x0000, &TACCR2
	mov  #0x0000, &TACCTL2  ; # Disabled
	mov  #0x0002, &DMEM_200
	mov  #0x0254, &TACTL    ; # Up-mode & clk/2

comp1_check_0:                  ; # Wait until SCCI is set to 1
	mov       r5, &DMEM_212
	mov &TACCTL1, r5
	mov       r5, r4
	and  #0x0001, r4
	jz  comp1_check_0
	mov &TACCTL1, &DMEM_214

	mov  #0x2080, &TACCTL1  ; # Wait until SCCI is set back to 0
comp1_check_1:
	mov       r5, &DMEM_216
	mov &TACCTL1, r5
	mov       r5, r4
	and  #0x0001, r4
	jz  comp1_check_1
	mov &TACCTL1, &DMEM_218
	
	
	                        ; # --------- UP-MODE - COMPARATOR 2 ----------
	mov  #0x0204, &TACTL
	mov  #0x0040, &TACCR0
	mov  #0x0000, &TACCTL0  ; # Disabled
	mov  #0x0000, &TACCR1
	mov  #0x0000, &TACCTL1  ; # Disabled
	mov  #0x0020, &TACCR2
	mov  #0x3080, &TACCTL2  ; # Compare mode, output toggle mode, select VCC input
	mov  #0x0003, &DMEM_200
	mov  #0x0254, &TACTL    ; # Up-mode & clk/2

comp2_check_0:                  ; # Wait until SCCI is set to 1
	mov       r5, &DMEM_222
	mov &TACCTL2, r5
	mov       r5, r4
	and  #0x0001, r4
	jz  comp2_check_0
	mov &TACCTL2, &DMEM_224

	mov  #0x2080, &TACCTL2  ; # Wait until SCCI is set back to 0
comp2_check_1:
	mov       r5, &DMEM_226
	mov &TACCTL2, r5
	mov       r5, r4
	and  #0x0001, r4
	jz  comp2_check_1
	mov &TACCTL2, &DMEM_228
	
		
	dint		
	mov  #0x0000, &DMEM_200
	mov  #0x4000, r15

	
        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	nop
	br #0xffff


        /* ----------------------      INTERRUPT ROUTINES    --------------- */

TIMERA_CCR0_VECTOR:
	mov     &TAR, &DMEM_202
	reti

	
TIMERA_TAIV_VECTOR:
	mov     &TAR, &DMEM_204
	mov    &TAIV, &DMEM_206
	reti


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test        ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test        ; Interrupt  1                      <unused>
.word end_of_test        ; Interrupt  2                      <unused>
.word end_of_test        ; Interrupt  3                      <unused>
.word end_of_test        ; Interrupt  4                      <unused>
.word end_of_test        ; Interrupt  5                      <unused>
.word end_of_test        ; Interrupt  6                      <unused>
.word end_of_test        ; Interrupt  7                      <unused>
.word TIMERA_TAIV_VECTOR ; Interrupt  8                      <unused>
.word TIMERA_CCR0_VECTOR ; Interrupt  9                      <unused>
.word end_of_test        ; Interrupt 10                      Watchdog timer
.word end_of_test        ; Interrupt 11                      <unused>
.word end_of_test        ; Interrupt 12                      <unused>
.word end_of_test        ; Interrupt 13                      <unused>
.word end_of_test        ; Interrupt 14                      NMI
.word main               ; Interrupt 15 (highest priority)   RESET
