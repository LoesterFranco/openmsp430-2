/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                                  TIMER A                                  */
/*---------------------------------------------------------------------------*/
/* Test the timer A:                                                         */
/*                        - Check RD/WR register access.                     */
/*                        - Check the clock divider.                         */
/*                        - Check the timer modes.                           */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev$                                                                */
/* $LastChangedBy$                                          */
/* $LastChangedDate$          */
/*===========================================================================*/

.global main

.set   TACTL,   0x0160
.set   TAR,     0x0170
.set   TACCTL0, 0x0162
.set   TACCR0,  0x0172
.set   TACCTL1, 0x0164
.set   TACCR1,  0x0174
.set   TACCTL2, 0x0166
.set   TACCR2,  0x0176
.set   TAIV,    0x012E


WAIT_FUNC:
	dec r14
	jnz WAIT_FUNC
	ret
	
main:
 	mov  #0x0250, r1 	; # Initialize stack pointer
	mov  #0x0000, &0x0200
	
       /* --------------   TIMER A TEST:  RD/WR ACCESS    --------------- */

	mov  #0xaaaa, &TACTL	; # TACTL
	mov   &TACTL, &0x0200
	mov  #0x5555, &TACTL
	mov   &TACTL, &0x0202
	mov  #0x0000, &TACTL
	mov   &TACTL, &0x0204
	mov  #0x0000, &TACTL
	mov   &TACTL, &0x0206

	mov  #0xaaaa, &TAR	; # TAR
	mov     &TAR, &0x0208
	mov  #0x5555, &TAR
	mov     &TAR, &0x020A
	mov  #0x0000, &TAR
	mov     &TAR, &0x020C

	mov  #0xaaaa, &TACCTL0	; # TACCTL0
	mov &TACCTL0, &0x0210
	mov  #0x5555, &TACCTL0
	mov &TACCTL0, &0x0212
	mov  #0x0000, &TACCTL0
	mov &TACCTL0, &0x0214

	mov  #0xaaaa, &TACCR0	; # TACCR0
	mov  &TACCR0, &0x0216
	mov  #0x5555, &TACCR0
	mov  &TACCR0, &0x0218
	mov  #0x0000, &TACCR0
	mov  &TACCR0, &0x021A

	mov  #0xaaaa, &TACCTL1	; # TACCTL1
	mov &TACCTL1, &0x0220
	mov  #0x5555, &TACCTL1
	mov &TACCTL1, &0x0222
	mov  #0x0000, &TACCTL1
	mov &TACCTL1, &0x0224

	mov  #0xaaaa, &TACCR1	; # TACCR1
	mov  &TACCR1, &0x0226
	mov  #0x5555, &TACCR1
	mov  &TACCR1, &0x0228
	mov  #0x0000, &TACCR1
	mov  &TACCR1, &0x022A

	mov  #0xaaaa, &TACCTL2	; # TACCTL2
	mov &TACCTL2, &0x0230
	mov  #0x5555, &TACCTL2
	mov &TACCTL2, &0x0232
	mov  #0x0000, &TACCTL2
	mov &TACCTL2, &0x0234

	mov  #0xaaaa, &TACCR2	; # TACCR2
	mov  &TACCR2, &0x0236
	mov  #0x5555, &TACCR2
	mov  &TACCR2, &0x0238
	mov  #0x0000, &TACCR2
	mov  &TACCR2, &0x023A

	mov  #0xaaaa, &TAIV	; # TAIV
	mov    &TAIV, &0x0240
	mov  #0x5555, &TAIV
	mov    &TAIV, &0x0242
	mov  #0x0000, &TAIV
	mov    &TAIV, &0x0244
		
	mov  #0x1000, r15

       /* --------------   TIMER A TEST:  INPUT DIVIDER   --------------- */

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	eint
	
	mov  #0x0200, &TACTL
	mov  #0x0020, &TACCR0
	mov  #0x0216, &TACTL 	; # /1
	mov  #0x0001, &0x0200
	mov  #0x0010, r14
        call #WAIT_FUNC
	
	mov  #0x0200, &TACTL
	mov  #0x0010, &TACCR0
	mov  #0x0256, &TACTL 	; # /2
	mov  #0x0002, &0x0200
	mov  #0x0010, r14
        call #WAIT_FUNC

	mov  #0x0200, &TACTL
	mov  #0x0008, &TACCR0
	mov  #0x0296, &TACTL 	; # /4
	mov  #0x0003, &0x0200
	mov  #0x0010, r14
        call #WAIT_FUNC

	mov  #0x0200, &TACTL
	mov  #0x0004, &TACCR0
	mov  #0x02D6, &TACTL 	; # /8
	mov  #0x0004, &0x0200
	mov  #0x0010, r14
        call #WAIT_FUNC

	dint
	mov  #0x0000, &0x0200
	mov  #0x2000, r15

	
       /* --------------   TIMER A TEST:  UP MODE   ----------------- */

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	eint
	
	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0012, &TACCR0   ; # Check timing for period = 0x12 +1
	mov  #0x0256, &TACTL
	mov  #0x0001, &0x0200
	mov  #0x0010, r14
        call #WAIT_FUNC

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x001E, &TACCR0   ; # Check timing for period = 0x1E +1
	mov  #0x0256, &TACTL
	mov  #0x0002, &0x0200
	mov  #0x0020, r14
        call #WAIT_FUNC

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0012, &TACCR0   ; # Check timing for period = 0x12 +1
	mov  #0x0254, &TACTL
	mov  #0x0010, &TACCTL0
	mov  #0x0003, &0x0200
	mov  #0x0010, r14
        call #WAIT_FUNC

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x001E, &TACCR0   ; # Check timing for period = 0x1E +1
	mov  #0x0254, &TACTL
	mov  #0x0010, &TACCTL0
	mov  #0x0004, &0x0200
	mov  #0x0020, r14
        call #WAIT_FUNC

	dint		
	mov  #0x0000, &0x0200
	mov  #0x3000, r15

	
       /* --------------   TIMER A TEST:  CONTINUOUS MODES   ----------------- */

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	eint

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0xfff0, &TAR      ; # Continuous mode
	mov  #0x0262, &TACTL
	mov  #0x0001, &0x0200
	mov  #0x0020, r14
        call #WAIT_FUNC

	dint		
	mov  #0x0000, &0x0200
	mov  #0x4000, r15

	
       /* --------------   TIMER A TEST:  UP-DOWN MODE   ----------------- */
		
	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	eint

	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0031, &TACCR0   ; # Up-Down mode - timing 1
	mov  #0x0000, &TAR
	mov  #0x0236, &TACTL
	mov  #0x0010, &TACCTL0
	mov  #0x0001, &0x0200
	mov  #0x0050, r14
        call #WAIT_FUNC
	mov  #0x0002, &0x0200
	
		
	dint		
	mov  #0x0200, &TACTL
	mov  #0x0000, &TACCTL0
	mov  #0x0000, &0x0200
	mov  #0x5000, r15

	

        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	nop
	br #0xffff


        /* ----------------------      INTERRUPT ROUTINES    --------------- */

TIMERA_CCR0_VECTOR:
	mov     &TAR, &0x0204
	reti

	
TIMERA_TAIV_VECTOR:
	mov     &TAR, &0x0202
	bic  #0x0001, &TACTL
	reti


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test        ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test        ; Interrupt  1                      <unused>
.word end_of_test        ; Interrupt  2                      <unused>
.word end_of_test        ; Interrupt  3                      <unused>
.word end_of_test        ; Interrupt  4                      <unused>
.word end_of_test        ; Interrupt  5                      <unused>
.word end_of_test        ; Interrupt  6                      <unused>
.word end_of_test        ; Interrupt  7                      <unused>
.word TIMERA_TAIV_VECTOR ; Interrupt  8                      <unused>
.word TIMERA_CCR0_VECTOR ; Interrupt  9                      <unused>
.word end_of_test        ; Interrupt 10                      Watchdog timer
.word end_of_test        ; Interrupt 11                      <unused>
.word end_of_test        ; Interrupt 12                      <unused>
.word end_of_test        ; Interrupt 13                      <unused>
.word end_of_test        ; Interrupt 14                      NMI
.word main               ; Interrupt 15 (highest priority)   RESET
