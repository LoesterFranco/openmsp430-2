/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                   TWO-OPERAND ARITHMETIC: MOV.B INSTRUCTION               */
/*---------------------------------------------------------------------------*/
/* Test the MOV.B instruction with all addressing modes                      */
/*===========================================================================*/


.global main

main:
        /* ---------------------- INITIALIZE REGISTERS --------------------- */
	mov     #0x2222, r2
	mov     #0x3333, r3
	mov     #0x4444, r4
	mov     #0x5555, r5
	mov     #0x6666, r6
	mov     #0x7777, r7
	mov     #0x8888, r8
	mov     #0x9999, r9
	mov     #0xaaaa, r10
	mov     #0xbbbb, r11
	mov     #0xcccc, r12
	mov     #0xdddd, r13
	mov     #0xeeee, r14

	mov     #0x1000, r15


        /* ---------------------- TEST WHEN SOURCE IS Rn ------------------- */
.set   Rn_EDEL,  (__data_start+0x0014)
.set   Rn_EDEH,  (__data_start+0x0017)
.set   Rn_TONYL, 0x0218
.set   Rn_TONYH, 0x021B

	mov.b        r5, r4        ;# Overwrite r4 with 0x0055

	mov     #0x0200, r5
	mov     #0xaaaa, &0x210
	mov     #0x1234, r6
	mov.b        r6, 16(r5)    ;# Write 0x34 to memory @0x0210
	mov     #0x5555, &0x212
	mov     #0x5678, r6
	mov.b        r6, 19(r5)    ;# Write 0x78 to memory @0x0213

	mov     #0x1111, &0x214
	mov     #0xabcd, r7
	mov.b        r7, Rn_EDEL   ;# Write 0xcd to memory @0x0214
	mov     #0x9999, &0x216
	mov     #0xef12, r7
	mov.b        r7, Rn_EDEH   ;# Write 0x12 to memory @0x0217

	mov     #0x7777, &0x218
	mov     #0x1f2e, r8
	mov.b        r8, &Rn_TONYL ;# Write 0x2e to memory @0x0218
	mov     #0x3333, &0x21A
	mov     #0x3d4c, r8
	mov.b        r8, &Rn_TONYH ;# Write 0x4c to memory @0x021B

	mov     #0x2000, r15


        /* ---------------------- TEST WHEN SOURCE IS @Rn ------------------ */
.set   aRn_EDE_218,  (__data_start+0x0018)
.set   aRn_EDE_21B,  (__data_start+0x001B)
.set   aRn_EDE_21C,  (__data_start+0x001C)
.set   aRn_EDE_21F,  (__data_start+0x001F)

.set   aRn_TONY_220, 0x0220
.set   aRn_TONY_223, 0x0223
.set   aRn_TONY_224, 0x0224
.set   aRn_TONY_227, 0x0227


	mov     #0x2233, &0x0210
	mov     #0x0210, r4
	mov     #0xffff, r5
	mov.b       @r4, r5         ;# r5 takes @0x0210 value: 0x0033
	mov     #0x4455, &0x0212
	mov     #0x0213, r4
	mov     #0xffff, r6
	mov.b       @r4, r6         ;# r6 takes @0x0213 value: 0x0044

	mov     #0x1122, &0x0200
	mov     #0x3344, &0x0202
	mov     #0x5566, &0x0204
	mov     #0x7788, &0x0206
	mov     #0x0200, r7
	mov     #0xaaaa, &0x0210
	mov     #0x5555, &0x0212
	mov     #0x5a5a, &0x0214
	mov     #0xa5a5, &0x0216

	mov     #0x0200, r8
	mov.b       @r8, 16(r7)      ;# Move memory @0x200 (0x22) to memory @0x210
	mov     #0x0202, r8
	mov.b       @r8, 19(r7)      ;# Move memory @0x202 (0x44) to memory @0x213
	mov     #0x0205, r8
	mov.b       @r8, 20(r7)      ;# Move memory @0x205 (0x55) to memory @0x214
	mov     #0x0207, r8
	mov.b       @r8, 23(r7)      ;# Move memory @0x207 (0x77) to memory @0x217

	mov     #0x99aa, &0x0200
	mov     #0xbbcc, &0x0202
	mov     #0xddee, &0x0204
	mov     #0xff11, &0x0206
	mov     #0x1111, &0x0218
	mov     #0xeeee, &0x021A
	mov     #0x1e1e, &0x021C
	mov     #0xe1e1, &0x021E

	mov     #0x0200, r8
	mov.b       @r8, aRn_EDE_218 ;# Move memory @0x200 (0xaa) to memory @0x218
	mov     #0x0202, r8
	mov.b       @r8, aRn_EDE_21B ;# Move memory @0x202 (0xcc) to memory @0x21B
	mov     #0x0205, r8
	mov.b       @r8, aRn_EDE_21C ;# Move memory @0x205 (0xdd) to memory @0x21C
	mov     #0x0207, r8
	mov.b       @r8, aRn_EDE_21F ;# Move memory @0x207 (0xff) to memory @0x21F

	mov     #0x2233, &0x0200
	mov     #0x4455, &0x0202
	mov     #0x6677, &0x0204
	mov     #0x8899, &0x0206
	mov     #0x2222, &0x0220
	mov     #0xdddd, &0x0222
	mov     #0x2d2d, &0x0224
	mov     #0xd2d2, &0x0226

	mov     #0x0200, r8
	mov.b       @r8, &aRn_TONY_220 ;# Move memory @0x200 (0x33) to memory @0x220
	mov     #0x0202, r8
	mov.b       @r8, &aRn_TONY_223 ;# Move memory @0x202 (0x55) to memory @0x223
	mov     #0x0205, r8
	mov.b       @r8, &aRn_TONY_224 ;# Move memory @0x205 (0x66) to memory @0x224
	mov     #0x0207, r8
	mov.b       @r8, &aRn_TONY_227 ;# Move memory @0x207 (0x88) to memory @0x227

	mov      #0x3000, r15


        /* ---------------------- TEST WHEN SOURCE IS @Rn+ ----------------- */
.set   aRni_EDE_218,  (__data_start+0x0018)
.set   aRni_EDE_21B,  (__data_start+0x001B)
.set   aRni_EDE_21C,  (__data_start+0x001C)
.set   aRni_EDE_21F,  (__data_start+0x001F)

.set   aRni_TONY_220, 0x0220
.set   aRni_TONY_223, 0x0223
.set   aRni_TONY_224, 0x0224
.set   aRni_TONY_227, 0x0227


	mov     #0x2233, &0x0210
	mov     #0x0210, r4
	mov     #0xffff, r5
	mov.b      @r4+, r5         ;# r5 takes @0x0210 value: 0x0033
	mov     #0x4455, &0x0212
	mov     #0x0213, r6
	mov     #0xffff, r7
	mov.b      @r6+, r7         ;# r7 takes @0x0213 value: 0x0044

	mov     #0x1122, &0x0200
	mov     #0x3344, &0x0202
	mov     #0x5566, &0x0204
	mov     #0x7788, &0x0206
	mov     #0x0200, r8
	mov     #0xaaaa, &0x0210
	mov     #0x5555, &0x0212
	mov     #0x5a5a, &0x0214
	mov     #0xa5a5, &0x0216

	mov     #0x0200, r9
	mov.b      @r9+, 16(r8)      ;# Move memory @0x200 (0x22) to memory @0x210
	mov.b      @r9+, r10    
	mov.b      @r9+, 19(r8)      ;# Move memory @0x202 (0x44) to memory @0x213
	mov        @r9+, r10    
	mov.b      @r9+, 20(r8)      ;# Move memory @0x205 (0x55) to memory @0x214
	mov.b      @r9+, r10    
	mov.b      @r9+, 23(r8)      ;# Move memory @0x207 (0x77) to memory @0x217

	mov     #0x99aa, &0x0200
	mov     #0xbbcc, &0x0202
	mov     #0xddee, &0x0204
	mov     #0xff11, &0x0206
	mov     #0x1111, &0x0218
	mov     #0xeeee, &0x021A
	mov     #0x1e1e, &0x021C
	mov     #0xe1e1, &0x021E

	mov     #0x0200, r10
	mov.b     @r10+, aRni_EDE_218 ;# Move memory @0x200 (0xaa) to memory @0x218
	mov.b     @r10+, r11
	mov.b     @r10+, aRni_EDE_21B ;# Move memory @0x202 (0xcc) to memory @0x21B
	mov       @r10+, r11    
	mov.b     @r10+, aRni_EDE_21C ;# Move memory @0x205 (0xdd) to memory @0x21C
	mov.b     @r10+, r11
	mov.b     @r10+, aRni_EDE_21F ;# Move memory @0x207 (0xff) to memory @0x21F

	mov     #0x2233, &0x0200
	mov     #0x4455, &0x0202
	mov     #0x6677, &0x0204
	mov     #0x8899, &0x0206
	mov     #0x2222, &0x0220
	mov     #0xdddd, &0x0222
	mov     #0x2d2d, &0x0224
	mov     #0xd2d2, &0x0226

	mov     #0x0200, r11
	mov.b     @r11+, &aRni_TONY_220 ;# Move memory @0x200 (0x33) to memory @0x220
	mov.b     @r11+, r12
	mov.b     @r11+, &aRni_TONY_223 ;# Move memory @0x202 (0x55) to memory @0x223
	mov       @r11+, r12
	mov.b     @r11+, &aRni_TONY_224 ;# Move memory @0x205 (0x66) to memory @0x224
	mov.b     @r11+, r12
	mov.b     @r11+, &aRni_TONY_227 ;# Move memory @0x207 (0x88) to memory @0x227

	mov      #0x4000, r15


        /* ---------------------- TEST WHEN SOURCE IS #N ------------------- */
.set   N_EDE_218,  (__data_start+0x0018)
.set   N_EDE_21B,  (__data_start+0x001B)
.set   N_EDE_21C,  (__data_start+0x001C)
.set   N_EDE_21F,  (__data_start+0x001F)

.set   N_TONY_220, 0x0220
.set   N_TONY_223, 0x0223
.set   N_TONY_224, 0x0224
.set   N_TONY_227, 0x0227


	mov     #0xffff, r4
	mov.b   #0x1234, r4         ;# r4 takes 0x0034 value

	mov     #0x0200, r5
	mov     #0xaaaa, &0x0210
	mov     #0x5555, &0x0212
	mov     #0x5a5a, &0x0214
	mov     #0xa5a5, &0x0216
	mov.b   #0x1122, 16(r5)     ;# Move value 0x22 to memory @0x210
	mov.b   #0x3344, 19(r5)     ;# Move value 0x44 to memory @0x213
	mov.b   #0x5566, 20(r5)     ;# Move value 0x66 to memory @0x214
	mov.b   #0x7788, 23(r5)     ;# Move value 0x88 to memory @0x217


	mov     #0x1111, &0x0218
	mov     #0xeeee, &0x021A
	mov     #0x1e1e, &0x021C
	mov     #0xe1e1, &0x021E
	mov.b   #0x99aa, N_EDE_218  ;# Move value 0xaa to memory @0x218
	mov.b   #0xbbcc, N_EDE_21B  ;# Move value 0xcc to memory @0x21B
	mov.b   #0xddee, N_EDE_21C  ;# Move value 0xee to memory @0x21C
	mov.b   #0xff11, N_EDE_21F  ;# Move value 0x11 to memory @0x21F

	mov     #0xaaaa, &0x0220
	mov     #0xeeee, &0x0222
	mov     #0xaeae, &0x0224
	mov     #0xeaea, &0x0226
	mov.b   #0x2233, &N_TONY_220 ;# Move value 0x33 to memory @0x220
	mov.b   #0x4455, &N_TONY_223 ;# Move value 0x55 to memory @0x223
	mov.b   #0x6677, &N_TONY_224 ;# Move value 0x77 to memory @0x224
	mov.b   #0x8899, &N_TONY_227 ;# Move value 0x99 to memory @0x227

	mov      #0x5000, r15


        /* ---------------------- TEST WHEN SOURCE IS x(Rn) ---------------- */
.set   xRn_EDE_218,  (__data_start+0x0018)
.set   xRn_EDE_21B,  (__data_start+0x001B)
.set   xRn_EDE_21C,  (__data_start+0x001C)
.set   xRn_EDE_21F,  (__data_start+0x001F)

.set   xRn_TONY_220, 0x0220
.set   xRn_TONY_223, 0x0223
.set   xRn_TONY_224, 0x0224
.set   xRn_TONY_227, 0x0227


	mov     #0x2233, &0x0210
	mov     #0x0200, r4
	mov     #0xffff, r5
	mov.b    16(r4), r5         ;# r5 takes @0x0210 value: 0x0033
	mov     #0x4455, &0x0212
	mov     #0xffff, r6
	mov.b    19(r4), r6         ;# r6 takes @0x0213 value: 0x0044

	mov     #0x1122, &0x0202
	mov     #0x3344, &0x0204
	mov     #0x5566, &0x0206
	mov     #0x7788, &0x0208
	mov     #0x0200, r7
	mov     #0xaaaa, &0x0210
	mov     #0x5555, &0x0212
	mov     #0x5a5a, &0x0214
	mov     #0xa5a5, &0x0216

	mov     #0x0200, r8
	mov.b     2(r8), 16(r7)      ;# Move memory @0x202 (0x22) to memory @0x210
	mov.b     4(r8), 19(r7)      ;# Move memory @0x204 (0x44) to memory @0x213
	mov.b     7(r8), 20(r7)      ;# Move memory @0x207 (0x55) to memory @0x214
	mov.b     9(r8), 23(r7)      ;# Move memory @0x209 (0x77) to memory @0x217

	mov     #0x99aa, &0x0202
	mov     #0xbbcc, &0x0204
	mov     #0xddee, &0x0206
	mov     #0xff11, &0x0208
	mov     #0x1111, &0x0218
	mov     #0xeeee, &0x021A
	mov     #0x1e1e, &0x021C
	mov     #0xe1e1, &0x021E

	mov     #0x0200, r8
	mov.b     2(r8), xRn_EDE_218 ;# Move memory @0x202 (0xaa) to memory @0x218
	mov.b     4(r8), xRn_EDE_21B ;# Move memory @0x204 (0xcc) to memory @0x21B
	mov.b     7(r8), xRn_EDE_21C ;# Move memory @0x207 (0xdd) to memory @0x21C
	mov.b     9(r8), xRn_EDE_21F ;# Move memory @0x209 (0xff) to memory @0x21F

	mov     #0x2233, &0x0202
	mov     #0x4455, &0x0204
	mov     #0x6677, &0x0206
	mov     #0x8899, &0x0208
	mov     #0x2222, &0x0220
	mov     #0xdddd, &0x0222
	mov     #0x2d2d, &0x0224
	mov     #0xd2d2, &0x0226

	mov     #0x0200, r8
	mov.b     2(r8), &xRn_TONY_220 ;# Move memory @0x202 (0x33) to memory @0x220
	mov.b     4(r8), &xRn_TONY_223 ;# Move memory @0x204 (0x55) to memory @0x223
	mov.b     7(r8), &xRn_TONY_224 ;# Move memory @0x207 (0x66) to memory @0x224
	mov.b     9(r8), &xRn_TONY_227 ;# Move memory @0x209 (0x88) to memory @0x227

	mov      #0x6000, r15


        /* ---------------------- TEST WHEN SOURCE IS 'EDE' ---------------- */
.set   EDE_EDE_202,  (__data_start+0x0002)
.set   EDE_EDE_204,  (__data_start+0x0004)
.set   EDE_EDE_207,  (__data_start+0x0007)
.set   EDE_EDE_209,  (__data_start+0x0009)
.set   EDE_EDE_210,  (__data_start+0x0010)
.set   EDE_EDE_213,  (__data_start+0x0013)
.set   EDE_EDE_218,  (__data_start+0x0018)
.set   EDE_EDE_21B,  (__data_start+0x001B)
.set   EDE_EDE_21C,  (__data_start+0x001C)
.set   EDE_EDE_21F,  (__data_start+0x001F)

.set   EDE_TONY_220, 0x0220
.set   EDE_TONY_223, 0x0223
.set   EDE_TONY_224, 0x0224
.set   EDE_TONY_227, 0x0227


	mov       #0x2233, &0x0210
	mov       #0xffff, r5
	mov.b EDE_EDE_210, r5         ;# r5 takes @0x0210 value: 0x0033
	mov       #0x4455, &0x0212
	mov       #0xffff, r6
	mov.b EDE_EDE_213, r6         ;# r6 takes @0x0213 value: 0x0044

	mov       #0x1122, &0x0202
	mov       #0x3344, &0x0204
	mov       #0x5566, &0x0206
	mov       #0x7788, &0x0208
	mov       #0x0200, r7
	mov       #0xaaaa, &0x0210
	mov       #0x5555, &0x0212
	mov       #0x5a5a, &0x0214
	mov       #0xa5a5, &0x0216

	mov.b EDE_EDE_202, 16(r7)      ;# Move memory @0x202 (0x22) to memory @0x210
	mov.b EDE_EDE_204, 19(r7)      ;# Move memory @0x204 (0x44) to memory @0x213
	mov.b EDE_EDE_207, 20(r7)      ;# Move memory @0x207 (0x55) to memory @0x214
	mov.b EDE_EDE_209, 23(r7)      ;# Move memory @0x209 (0x77) to memory @0x217

	mov       #0x99aa, &0x0202
	mov       #0xbbcc, &0x0204
	mov       #0xddee, &0x0206
	mov       #0xff11, &0x0208
	mov       #0x1111, &0x0218
	mov       #0xeeee, &0x021A
	mov       #0x1e1e, &0x021C
	mov       #0xe1e1, &0x021E

	mov.b EDE_EDE_202, EDE_EDE_218 ;# Move memory @0x202 (0xaa) to memory @0x218
	mov.b EDE_EDE_204, EDE_EDE_21B ;# Move memory @0x204 (0xcc) to memory @0x21B
	mov.b EDE_EDE_207, EDE_EDE_21C ;# Move memory @0x207 (0xdd) to memory @0x21C
	mov.b EDE_EDE_209, EDE_EDE_21F ;# Move memory @0x209 (0xff) to memory @0x21F

	mov       #0x2233, &0x0202
	mov       #0x4455, &0x0204
	mov       #0x6677, &0x0206
	mov       #0x8899, &0x0208
	mov       #0x2222, &0x0220
	mov       #0xdddd, &0x0222
	mov       #0x2d2d, &0x0224
	mov       #0xd2d2, &0x0226

	mov.b EDE_EDE_202, &EDE_TONY_220 ;# Move memory @0x202 (0x33) to memory @0x220
	mov.b EDE_EDE_204, &EDE_TONY_223 ;# Move memory @0x204 (0x55) to memory @0x223
	mov.b EDE_EDE_207, &EDE_TONY_224 ;# Move memory @0x207 (0x66) to memory @0x224
	mov.b EDE_EDE_209, &EDE_TONY_227 ;# Move memory @0x209 (0x88) to memory @0x227

	mov      #0x7000, r15



        /* ---------------------- TEST WHEN SOURCE IS '&EDE' --------------- */
.set   aEDE_EDE_218,  (__data_start+0x0018)
.set   aEDE_EDE_21B,  (__data_start+0x001B)
.set   aEDE_EDE_21C,  (__data_start+0x001C)
.set   aEDE_EDE_21F,  (__data_start+0x001F)

.set   aEDE_TONY_220, 0x0220
.set   aEDE_TONY_223, 0x0223
.set   aEDE_TONY_224, 0x0224
.set   aEDE_TONY_227, 0x0227


	mov       #0x2233, &0x0210
	mov       #0xffff, r5
	mov.b     &0x0210, r5         ;# r5 takes @0x0210 value: 0x0033
	mov       #0x4455, &0x0212
	mov       #0xffff, r6
	mov.b     &0x0213, r6         ;# r6 takes @0x0213 value: 0x0044

	mov       #0x1122, &0x0202
	mov       #0x3344, &0x0204
	mov       #0x5566, &0x0206
	mov       #0x7788, &0x0208
	mov       #0x0200, r7
	mov       #0xaaaa, &0x0210
	mov       #0x5555, &0x0212
	mov       #0x5a5a, &0x0214
	mov       #0xa5a5, &0x0216

	mov.b     &0x0202, 16(r7)      ;# Move memory @0x202 (0x22) to memory @0x210
	mov.b     &0x0204, 19(r7)      ;# Move memory @0x204 (0x44) to memory @0x213
	mov.b     &0x0207, 20(r7)      ;# Move memory @0x207 (0x55) to memory @0x214
	mov.b     &0x0209, 23(r7)      ;# Move memory @0x209 (0x77) to memory @0x217

	mov       #0x99aa, &0x0202
	mov       #0xbbcc, &0x0204
	mov       #0xddee, &0x0206
	mov       #0xff11, &0x0208
	mov       #0x1111, &0x0218
	mov       #0xeeee, &0x021A
	mov       #0x1e1e, &0x021C
	mov       #0xe1e1, &0x021E

	mov.b     &0x0202, aEDE_EDE_218 ;# Move memory @0x202 (0xaa) to memory @0x218
	mov.b     &0x0204, aEDE_EDE_21B ;# Move memory @0x204 (0xcc) to memory @0x21B
	mov.b     &0x0207, aEDE_EDE_21C ;# Move memory @0x207 (0xdd) to memory @0x21C
	mov.b     &0x0209, aEDE_EDE_21F ;# Move memory @0x209 (0xff) to memory @0x21F

	mov       #0x2233, &0x0202
	mov       #0x4455, &0x0204
	mov       #0x6677, &0x0206
	mov       #0x8899, &0x0208
	mov       #0x2222, &0x0220
	mov       #0xdddd, &0x0222
	mov       #0x2d2d, &0x0224
	mov       #0xd2d2, &0x0226

	mov.b     &0x0202, &aEDE_TONY_220 ;# Move memory @0x202 (0x33) to memory @0x220
	mov.b     &0x0204, &aEDE_TONY_223 ;# Move memory @0x204 (0x55) to memory @0x223
	mov.b     &0x0207, &aEDE_TONY_224 ;# Move memory @0x207 (0x66) to memory @0x224
	mov.b     &0x0209, &aEDE_TONY_227 ;# Move memory @0x209 (0x88) to memory @0x227

	mov      #0x8000, r15


        /* ---------------------- TEST WHEN SOURCE IS CONSTANT ------------- */
.set   CONSTL_EDE0,   (__data_start+0x0030)
.set   CONSTL_EDE1,   (__data_start+0x0032)
.set   CONSTL_EDE2,   (__data_start+0x0034)
.set   CONSTL_EDE4,   (__data_start+0x0036)
.set   CONSTL_EDE8,   (__data_start+0x0038)
.set   CONSTL_EDEm1,  (__data_start+0x003A)
.set   CONSTH_EDE0,   (__data_start+0x003D)
.set   CONSTH_EDE1,   (__data_start+0x003F)
.set   CONSTH_EDE2,   (__data_start+0x0041)
.set   CONSTH_EDE4,   (__data_start+0x0043)
.set   CONSTH_EDE8,   (__data_start+0x0045)
.set   CONSTH_EDEm1,  (__data_start+0x0047)

.set   CONSTL_TONY0,  0x0250
.set   CONSTL_TONY1,  0x0252
.set   CONSTL_TONY2,  0x0254
.set   CONSTL_TONY4,  0x0256
.set   CONSTL_TONY8,  0x0258
.set   CONSTL_TONYm1, 0x025A
.set   CONSTH_TONY0,  0x025D
.set   CONSTH_TONY1,  0x025F
.set   CONSTH_TONY2,  0x0261
.set   CONSTH_TONY4,  0x0263
.set   CONSTH_TONY8,  0x0265
.set   CONSTH_TONYm1, 0x0267


	mov      #0x4444, r4              ;# Initialize registers
	mov      #0x5555, r5
	mov      #0x6666, r6
	mov      #0x7777, r7
	mov      #0x8888, r8
	mov      #0x9999, r9

	mov.b    #0x0000, r4              ;# Write +0 to R4
	mov.b    #0x0001, r5              ;# Write +1 to R5
	mov.b    #0x0002, r6              ;# Write +2 to R6
	mov.b    #0x0004, r7              ;# Write +4 to R7
	mov.b    #0x0008, r8              ;# Write +8 to R8
	mov.b    #0xffff, r9              ;# Write -1 to R9

	mov      #0x4444, &0x0210         ;# Initialize Memory
	mov      #0x5555, &0x0212
	mov      #0x6666, &0x0214
	mov      #0x7777, &0x0216
	mov      #0x3535, &0x0218
	mov      #0x9999, &0x021A
	mov      #0xaaaa, &0x021C
	mov      #0xbbbb, &0x021E
	mov      #0xcccc, &0x0220
	mov      #0xdddd, &0x0222
	mov      #0xeeee, &0x0224
	mov      #0x3333, &0x0226

        mov      #0x0202, r10
	mov      #0x1234, r11
	mov.b    #0x0000, 14(r10)         ;# Move +0 to memory @0x210
	mov.b    #0x0001, 16(r10)         ;# Move +1 to memory @0x212
	mov.b    #0x0002, 18(r10)         ;# Move +2 to memory @0x214
	mov.b    #0x0004, 20(r10)         ;# Move +4 to memory @0x216
	mov.b    #0x0008, 22(r10)         ;# Move +8 to memory @0x218
	mov.b    #0xffff, 24(r10)         ;# Move -1 to memory @0x21A
	mov.b    #0x0000, 27(r10)         ;# Move +0 to memory @0x21D
	mov.b    #0x0001, 29(r10)         ;# Move +1 to memory @0x21F
	mov.b    #0x0002, 31(r10)         ;# Move +2 to memory @0x221
	mov.b    #0x0004, 33(r10)         ;# Move +4 to memory @0x223
	mov.b    #0x0008, 35(r10)         ;# Move +8 to memory @0x225
	mov.b    #0xffff, 37(r10)         ;# Move -1 to memory @0x227

	mov      #0x4444, &0x0230         ;# Initialize Memory
	mov      #0x5555, &0x0232
	mov      #0x6666, &0x0234
	mov      #0x7777, &0x0236
	mov      #0x3535, &0x0238
	mov      #0x9999, &0x023A
	mov      #0xaaaa, &0x023C
	mov      #0xbbbb, &0x023E
	mov      #0xcccc, &0x0240
	mov      #0xdddd, &0x0242
	mov      #0xeeee, &0x0244
	mov      #0x3333, &0x0246

	mov.b    #0x0000, CONSTL_EDE0     ;# Move +0 to memory @0x230
	mov.b    #0x0001, CONSTL_EDE1     ;# Move +1 to memory @0x232
	mov.b    #0x0002, CONSTL_EDE2     ;# Move +2 to memory @0x234
	mov.b    #0x0004, CONSTL_EDE4     ;# Move +4 to memory @0x236
	mov.b    #0x0008, CONSTL_EDE8     ;# Move +8 to memory @0x238
	mov.b    #0xffff, CONSTL_EDEm1    ;# Move -1 to memory @0x23A
	mov.b    #0x0000, CONSTH_EDE0     ;# Move +0 to memory @0x23D
	mov.b    #0x0001, CONSTH_EDE1     ;# Move +1 to memory @0x23F
	mov.b    #0x0002, CONSTH_EDE2     ;# Move +2 to memory @0x241
	mov.b    #0x0004, CONSTH_EDE4     ;# Move +4 to memory @0x243
	mov.b    #0x0008, CONSTH_EDE8     ;# Move +8 to memory @0x245
	mov.b    #0xffff, CONSTH_EDEm1    ;# Move -1 to memory @0x247


	#
	# NOTE: The following section would not fit in the smallest ROM
        #       configuration. Therefore, it is executed at the end of
        #       the "two-op_mov.s43" pattern.
	#

#	mov      #0x4444, &0x0250         ;# Initialize Memory
#	mov      #0x5555, &0x0252
#	mov      #0x6666, &0x0254
#	mov      #0x7777, &0x0256
#	mov      #0x3535, &0x0258
#	mov      #0x9999, &0x025A
#	mov      #0xaaaa, &0x025C
#	mov      #0xbbbb, &0x025E
#	mov      #0xcccc, &0x0260
#	mov      #0xdddd, &0x0262
#	mov      #0xeeee, &0x0264
#	mov      #0x3333, &0x0266

#	mov.b    #0x0000, &CONSTL_TONY0    ;# Move +0 to memory @0x250
#	mov.b    #0x0001, &CONSTL_TONY1    ;# Move +1 to memory @0x252
#	mov.b    #0x0002, &CONSTL_TONY2    ;# Move +2 to memory @0x254
#	mov.b    #0x0004, &CONSTL_TONY4    ;# Move +4 to memory @0x256
#	mov.b    #0x0008, &CONSTL_TONY8    ;# Move +8 to memory @0x258
#	mov.b    #0xffff, &CONSTL_TONYm1   ;# Move -1 to memory @0x25A
#	mov.b    #0x0000, &CONSTH_TONY0    ;# Move +0 to memory @0x25D
#	mov.b    #0x0001, &CONSTH_TONY1    ;# Move +1 to memory @0x25F
#	mov.b    #0x0002, &CONSTH_TONY2    ;# Move +2 to memory @0x261
#	mov.b    #0x0004, &CONSTH_TONY4    ;# Move +4 to memory @0x263
#	mov.b    #0x0008, &CONSTH_TONY8    ;# Move +8 to memory @0x265
#	mov.b    #0xffff, &CONSTH_TONYm1   ;# Move -1 to memory @0x267

	mov      #0x9000, r15


        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	nop
	br #0xffff



        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
